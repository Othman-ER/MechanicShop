@page "/customers"
@using MechanicShop.Contracts.Requests.Customers
@attribute [Authorize]

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1 text-body-emphasis">
                <i class="bi bi-people me-2"></i>Customers
            </h1>
            <p class="text-muted mb-0">Manage customers and their vehicles</p>
        </div>
        <button class="btn btn-primary btn-lg" @onclick="ShowCreateModal">
            <i class="bi bi-plus-lg me-1"></i>
            New Customer
        </button>
    </div>

    <!-- Search and Filter -->
    <div class="card border mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text bg-transparent border-end-0">
                            <i class="bi bi-search text-muted"></i>
                        </span>
                        <input type="text" class="form-control border-start-0 ps-0"
                               placeholder="Search customers..."
                               @bind="searchTerm" @oninput="OnSearchChanged">
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="sortBy" @bind:after="ApplyFilters">
                        <option value="name">Sort by Name</option>
                        <option value="email">Sort by Email</option>
                        <option value="phone">Sort by Phone</option>
                        <option value="vehicles">Sort by Vehicle Count</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <div class="btn-group w-100" role="group">
                        <input type="radio" class="btn-check" id="asc" @onchange="() => SetSortDirection(true)" checked="@sortAscending">
                        <label class="btn btn-outline-secondary" for="asc">
                            <i class="bi bi-sort-up"></i>
                        </label>
                        <input type="radio" class="btn-check" id="desc" @onchange="() => SetSortDirection(false)" checked="@(!sortAscending)">
                        <label class="btn btn-outline-secondary" for="desc">
                            <i class="bi bi-sort-down"></i>
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Customers List -->
    <div class="row g-4">
        @if (filteredCustomers.Any())
        {
            @foreach (var customer in filteredCustomers)
            {
                <div class="col-xl-4 col-lg-6">
                    <div class="card border-0 shadow-sm bg-body-secondary h-100 customer-card">
                        <div class="card-header bg-transparent border-bottom-0 d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h5 class="card-title mb-1 text-truncate">@customer.Name</h5>
                                <div class="d-flex align-items-center text-muted small">
                                    <i class="bi bi-envelope me-1"></i>
                                    @customer.Email
                                </div>
                            </div>
                            <div class="dropdown">
                                <button class="btn btn-link text-muted p-1" data-bs-toggle="dropdown">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li>
                                        <a class="dropdown-item" href="#" @onclick="() => ShowEditModal(customer)" @onclick:preventDefault="true">
                                            <i class="bi bi-pencil me-2"></i>Edit
                                        </a>
                                    </li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <a class="dropdown-item text-danger" href="#" @onclick="() => ShowDeleteModal(customer)" @onclick:preventDefault="true">
                                            <i class="bi bi-trash me-2"></i>Delete
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <div class="card-body pt-0">
                            <div class="row g-3 mb-3">
                                <div class="col-12">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-phone me-2 text-muted"></i>
                                        <span>@customer.PhoneNumber</span>
                                    </div>
                                </div>
                            </div>

                            <div class="border-top pt-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="text-muted small">Vehicles (@customer.Vehicles.Count)</span>
                                    <span class="badge bg-secondary">@customer.Vehicles.Count</span>
                                </div>

                                @if (customer.Vehicles.Any())
                                {
                                    <div class="vehicles-preview">
                                        @foreach (var vehicle in customer.Vehicles.Take(3))
                                        {
                                            <div class="d-flex justify-content-between align-items-center py-1">
                                                <span class="text-truncate small">@vehicle.Year @vehicle.Make @vehicle.Model</span>
                                                <span class="text-muted small">@vehicle.LicensePlate</span>
                                            </div>
                                        }
                                        @if (customer.Vehicles.Count > 3)
                                        {
                                            <div class="text-muted small text-center mt-1">
                                                +@(customer.Vehicles.Count - 3) more vehicles
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="text-muted small text-center py-2">No vehicles added</div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="text-center py-5">
                    <div class="mb-3">
                        <i class="bi bi-search display-1 text-muted opacity-50"></i>
                    </div>
                    <h4 class="text-muted">No customers found</h4>
                    <p class="text-muted">@(string.IsNullOrEmpty(searchTerm) ? "Start by creating your first customer." : "Try adjusting your search criteria.")</p>
                    @if (string.IsNullOrEmpty(searchTerm))
                    {
                        <button class="btn btn-primary" @onclick="ShowCreateModal">
                            <i class="bi bi-plus-lg me-1"></i>Create Customer
                        </button>
                    }
                </div>
            </div>
        }
    </div>
</div>

<TemplatedDialog Show="_showDialog" OnClose="HideDialog" Title="_dialogTitle">
    @if(!isEditMode)
    {
        <EditForm Model="newCustomerRequest" OnValidSubmit="SaveCustomer">
            <ObjectGraphDataAnnotationsValidator />
            <div class="row g-3">
                <div class="col-12">
                    <label class="form-label">Customer Name <span class="text-danger">*</span></label>
                    <InputText class="form-control" @bind-Value="newCustomerRequest.Name" />
                    <ValidationMessage For="@(() => newCustomerRequest.Name)" class="text-danger small" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Phone Number <span class="text-danger">*</span></label>
                    <InputText class="form-control" @bind-Value="newCustomerRequest.PhoneNumber" />
                    <ValidationMessage For="@(() => newCustomerRequest.PhoneNumber)" class="text-danger small" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Email <span class="text-danger">*</span></label>
                    <InputText class="form-control" @bind-Value="newCustomerRequest.Email" type="email" />
                    <ValidationMessage For="@(() => newCustomerRequest.Email)" class="text-danger small" />
                </div>
            </div>

            <div class="border-top pt-4 mt-4">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h6 class="mb-0">Vehicles</h6>
                    <button type="button" class="btn btn-outline-primary btn-sm" @onclick="AddVehicle">
                        <i class="bi bi-plus me-1"></i>Add Vehicle
                    </button>
                </div>

                @if (newCustomerRequest.Vehicles.Any())
                {
                    <div class="row g-3 mb-2">
                        <div class="col-md-3">
                            <label class="form-label">Make</label>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Model</label>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Year</label>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">License Plate</label>
                        </div>
                        <div class="col-md-1">
                        </div>
                    </div>
                    @for (int i = 0; i < newCustomerRequest.Vehicles.Count; i++)
                    {
                        var index = i;
                        <div class="row g-3 mb-2">
                            <div class="col-md-3">
                                <InputSelect class="form-select" @bind-Value="newCustomerRequest.Vehicles[index].Make" @bind-Value:after="() => OnMakeChanged(index, false)">
                                    <option value="">-- Select Make --</option>
                                    @foreach (var make in CarMakes.Keys.OrderBy(k => k))
                                    {
                                        <option value="@make">@make</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => newCustomerRequest.Vehicles[index].Make)" class="text-danger small" />
                            </div>
                            <div class="col-md-3">
                                <InputSelect class="form-select" @bind-Value="newCustomerRequest.Vehicles[index].Model" disabled="@(string.IsNullOrEmpty(newCustomerRequest.Vehicles[index].Make))">
                                    <option value="">-- Select Model --</option>
                                    @if (!string.IsNullOrEmpty(newCustomerRequest.Vehicles[index].Make) && CarMakes.ContainsKey(newCustomerRequest.Vehicles[index].Make))
                                    {
                                        @foreach (var model in CarMakes[newCustomerRequest.Vehicles[index].Make].OrderBy(m => m))
                                        {
                                            <option value="@model">@model</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => newCustomerRequest.Vehicles[index].Model)" class="text-danger small" />
                            </div>
                            <div class="col-md-2">
                                <InputNumber class="form-control" @bind-Value="newCustomerRequest.Vehicles[index].Year" min="1900" max="@DateTime.Now.Year" />
                                <ValidationMessage For="@(() => newCustomerRequest.Vehicles[index].Year)" class="text-danger small" />
                            </div>
                            <div class="col-md-3">
                                <InputText class="form-control" @bind-Value="newCustomerRequest.Vehicles[index].LicensePlate" />
                                <ValidationMessage For="@(() => newCustomerRequest.Vehicles[index].LicensePlate)" class="text-danger small" />
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-link link-danger btn-sm" @onclick="() => RemoveVehicle(index)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    }
                }
            </div>

            <div class="modal-footer mt-3">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-plus-lg me-1"></i>
                    Create Customer
                </button>
                <button type="button" class="btn btn-secondary" @onclick="HideDialog">Cancel</button>
            </div>
        </EditForm>
    }
    else
    {
        <EditForm Model="updateCustomerRequest" OnValidSubmit="SaveCustomer">
            <ObjectGraphDataAnnotationsValidator/>
            <div class="row g-3">
                <div class="col-12">
                    <label class="form-label">Customer Name <span class="text-danger">*</span></label>
                    <InputText class="form-control" @bind-Value="updateCustomerRequest.Name" />
                    <ValidationMessage For="@(() => updateCustomerRequest.Name)" class="text-danger small" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Phone Number <span class="text-danger">*</span></label>
                    <InputText class="form-control" @bind-Value="updateCustomerRequest.PhoneNumber" />
                    <ValidationMessage For="@(() => updateCustomerRequest.PhoneNumber)" class="text-danger small" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Email <span class="text-danger">*</span></label>
                    <InputText class="form-control" @bind-Value="updateCustomerRequest.Email" type="email" />
                    <ValidationMessage For="@(() => updateCustomerRequest.Email)" class="text-danger small" />
                </div>
            </div>

            <div class="border-top pt-4 mt-4">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h6 class="mb-0">Vehicles</h6>
                </div>

                @if (updateCustomerRequest.Vehicles.Any())
                {
                    <div class="row g-3 mb-2">
                        <div class="col-md-3">
                            <label class="form-label">Make</label>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Model</label>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Year</label>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">License Plate</label>
                        </div>
                        <div class="col-md-1">
                        </div>
                    </div>
                    @for (int i = 0; i < updateCustomerRequest.Vehicles.Count; i++)
                    {
                        var index = i;
                        <div class="row g-3 mb-2">
                            <div class="col-md-3">
                                <InputSelect class="form-select" @bind-Value="updateCustomerRequest.Vehicles[index].Make" @bind-Value:after="() => OnMakeChanged(index, true)">
                                    <option value="">-- Select Make --</option>
                                    @foreach (var make in CarMakes.Keys.OrderBy(k => k))
                                    {
                                        <option value="@make">@make</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => updateCustomerRequest.Vehicles[index].Make)" class="text-danger small" />
                            </div>
                            <div class="col-md-3">
                                <InputSelect class="form-select" @bind-Value="updateCustomerRequest.Vehicles[index].Model" disabled="@(string.IsNullOrEmpty(updateCustomerRequest.Vehicles[index].Make))">
                                    <option value="">-- Select Model --</option>
                                    @if (!string.IsNullOrEmpty(updateCustomerRequest.Vehicles[index].Make) && CarMakes.ContainsKey(updateCustomerRequest.Vehicles[index].Make))
                                    {
                                        @foreach (var model in CarMakes[updateCustomerRequest.Vehicles[index].Make].OrderBy(m => m))
                                        {
                                            <option value="@model">@model</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => updateCustomerRequest.Vehicles[index].Model)" class="text-danger small" />
                            </div>
                            <div class="col-md-2">
                                <InputNumber class="form-control" @bind-Value="updateCustomerRequest.Vehicles[index].Year" min="1900" max="@DateTime.Now.Year" />
                                <ValidationMessage For="@(() => updateCustomerRequest.Vehicles[index].Year)" class="text-danger small" />
                            </div>
                            <div class="col-md-3">
                                <InputText class="form-control" @bind-Value="updateCustomerRequest.Vehicles[index].LicensePlate" />
                                <ValidationMessage For="@(() => updateCustomerRequest.Vehicles[index].LicensePlate)" class="text-danger small" />
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-link link-danger btn-sm" @onclick="() => RemoveVehicle(index)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    }
                }
                <button type="button" class="btn btn-outline-primary btn-sm" @onclick="AddVehicle">
                    <i class="bi bi-plus me-1"></i>Add Vehicle
                </button>
            </div>

            <div class="modal-footer mt-3 d-flex gap-2 mt-3 pt-2">
                <button type="submit" class="btn btn-primary me-1">
                    <i class="bi bi-check-lg me-1"></i>
                    Update Customer
                </button>
                <button type="button" class="btn btn-secondary me-1" @onclick="HideDialog">Cancel</button>
            </div>
        </EditForm>

        @if (errorMessage != null)
        {
            <div class="alert alert-danger mt-3">
                <strong>Error:</strong> @errorMessage
            </div>
        }
    }
</TemplatedDialog>